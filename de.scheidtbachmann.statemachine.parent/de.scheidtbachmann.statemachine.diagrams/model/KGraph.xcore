@Ecore(nsPrefix="klighdgraph", nsURI="http://kieler.cs.cau.de/KlighdGraph")
@GenModel(
	copyrightText="KIELER - Kiel Integrated Environment for Layout Eclipse RichClient\n\nhttp://www.informatik.uni-kiel.de/rtsys/kieler/\n\nCopyright 2009 by\n+ Kiel University\n  + Department of Computer Science\n    + Real-Time and Embedded Systems Group\n\nThis code is provided under the terms of the Eclipse Public License (EPL).\nSee the file epl-v10.html for the license text.",
	bundleManifest="false",
	updateClasspath="false",
	complianceLevel="5.0",
	modelPluginID='',
	prefix="KGraph",
	modelName="KGraph",
	modelDirectory="/de.scheidtbachmann.statemachine.diagrams/src/main/emf-gen"
	)
package de.cau.cs.kieler.klighd.kgraph

import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EMap

@GenModel(documentation="This is the superclass of all elements of a graph such as nodes, edges, ports,\nand labels. A graph element may contain an arbitrary number of additional\ndata instances.")
abstract class KGraphElement extends EMapPropertyHolder {
	@GenModel(documentation="Each element of this list may contain additional data for the model element.",
		propertyCategory="", propertyDescription="Graph data for this graph element, e.g. layout data")
	contains KGraphData[] data
	@GenModel(documentation="Returns the first data instance that matches the given class. Classes\ncan be obtained using the static package methods of the corresponding\nEMF model.\n@return graph data for the given type, or {@code null} if there is none")
	op KGraphData getData(EClass ^type)
	@GenModel(documentation="Returns the first data instance that matches the given class.\n@param type the class of graph data to retrieve\n@return graph data for the given type, or {@code null} if there is none")
	op <T extends KGraphData> T getData(Class<T>^type)
}

@GenModel(documentation="Labeled graph elements contain an arbitrary number of labels.")
abstract class KLabeledGraphElement extends KGraphElement {
	@GenModel(documentation="An edge may have multiple labels.",
		propertyDescription="The labels associated with this graph element")
	contains KLabel[] labels opposite parent
}

@GenModel(documentation="This class can be extended to hold arbitrary additional data for\ngraph elements, such as layout or rendering information.\nFurthermore, graph data extensions are property holders, hence\nthey can be annotated with key-value pairs, e.g. for setting options\nthat control the layout algorithms.",
	image="false")
class KGraphData extends EMapPropertyHolder {
}

@GenModel(documentation="All nodes except exactly one node must have an assigned parent node. The node\nwithout parent is the top node of the graph and represents the graph itself. Each\nnode must be assigned a label.\n<p>The parent-child relationship of nodes can be used to describe hierarchy in\nnested graphs.</p>")
class KNode extends KLabeledGraphElement , KShapeLayout {
	@GenModel(documentation="The children together with their edges form a sub-graph that is contained\nin this parent node.")
	contains KNode[] children opposite parent
	@GenModel(documentation="The parent node must be {@code null} if and only if this is the top node of\nthe graph structure.")
	container KNode parent opposite children
	@GenModel(documentation="Each node may have an arbitrary number of ports. Edges may or may not be\nconnected to ports.")
	contains KPort[] ports opposite node
	contains KEdge[] outgoingEdges opposite source
	refers KEdge[] incomingEdges opposite target
}

@GenModel(documentation="An edge must be assigned a source and a target node, but the source and target ports\nare optional. The source and target references are opposite to the lists of outgoing and\nincoming edges of nodes, respectively. The source and target port references are\nnot opposite to the ports\' list of edges, but despite that, setting these references will\nautomatically update the edges reference of the corresponding port.")
class KEdge extends KLabeledGraphElement , KEdgeLayout {
	@GenModel(documentation="The source node is expected to be set for each edge. This is especially\nimportant because the source node is defined to be the container of the\nedge, which is relevant for many EMF features such as XML storage or\ncopying. The source reference is opposite to the nodes\' list of outgoing\nedges, hence those references are synchronized automatically.")
	container KNode[1] source opposite outgoingEdges
	@GenModel(documentation="The target node is expected to be set for each edge.\nThe target reference is opposite to the nodes\' list of incoming\nedges, hence those references are synchronized automatically.")
	refers KNode[1] target opposite incomingEdges
	@GenModel(documentation="This reference is optional, as a node may have no ports.\nThe reference is not opposite to the list of edges stored by ports,\nbut setting it automatically updates that list.")
	refers KPort sourcePort
	@GenModel(documentation="This reference is optional, as a node may have no ports.\nThe reference is not opposite to the list of edges stored by ports,\nbut setting it automatically updates that list.")
	refers KPort targetPort
}

@GenModel(documentation="Each port must be assigned a containing node. A port may contain incoming\nedges as well as outgoing edges, but usually either one or the other kind is\nreferenced. The list of edges is not opposite to the edges\' source or target\nport reference. However, the list content is automatically updated when those\nreferences are set.\n<p>\nSince the information contained in this list is redundant, it is marked as transient,\ni.e. it is not serialized.\n</p>")
class KPort extends KLabeledGraphElement , KShapeLayout {
	@GenModel(documentation="Each port must be assigned a containing node. This is especially\nimportant because the node is defined to be the container of the\nport, which is relevant for many EMF features such as XML storage or\ncopying.")
	container KNode[1] node opposite ports
	@GenModel(documentation="Edges in this list may be incoming as well as outgoing with respect\nto the containing node. The list of edges is not opposite to the edges\'\nsource or target port reference. Just adding an edge to this list does\nnot imply that the source or target port reference is set, since it is\nunclear which reference to pick. However, the list content is automatically\nupdated when one of those references is set or unset.\nTherefore it is advisable not to modify this list directly, but to use\n{@link KEdge#setSourcePort(KPort)} or {@link KEdge#setTargetPort(KPort)}\ninstead.")
	refers transient derived KEdge[] edges
}

@GenModel(documentation="Each label must be assigned a parent graph element and a text string.")
class KLabel extends KGraphElement , KShapeLayout {
	String text
	container KLabeledGraphElement[1] parent opposite labels
}

@GenModel(documentation="A property holder implementation based on {@link org.eclipse.emf.common.util.EMap} which can be used in Ecore models.")
abstract class EMapPropertyHolder extends IPropertyHolder {
	contains transient IPropertyToObjectMap[] properties
	contains PersistentEntry[] persistentEntries
	@GenModel(documentation="Serialize all entries of the properties map using {@link Object#toString()}\nand write them into the list of persistent entries. The previous content is cleared.")
	op void makePersistent()
}

@GenModel(documentation="A map entry for EMap property holders.")
class IPropertyToObjectMap wraps java.util.Map.Entry {
	transient IProperty<?>[1] key
	transient Object value
}

type IProperty<T> wraps org.eclipse.elk.graph.properties.IProperty

interface IPropertyHolder wraps org.eclipse.elk.graph.properties.IPropertyHolder {
	op <T> IPropertyHolder setProperty(IProperty<? super T>[1] property , T value)
	op <T> T getProperty(IProperty<T>property)
	op boolean hasProperty(IProperty<?>property)
	op IPropertyHolder copyProperties(IPropertyHolder[1] holder)
	op EMap<IProperty<?>, Object>[1] getAllProperties()
}

class PersistentEntry {
	String[1] key
	String value
}

@GenModel(documentation="This layout data contains information for graph elements for which rectangular\nshape is assumed for layout, such as nodes, ports, and labels. Each graph element\nhas either a shape layout or an edge layout attached. The shape layout of nodes\nhas insets.\n<p>\nLayout coordinates for nodes, ports, and node labels are relative to the parent\nnode. The insets of the parent node are not included in the relative coordinates\nof child nodes, but they are included in the relative coordinates of ports and\nnode labels. For edge labels the rules defined in {@link KEdgeLayout} apply.\nPort labels are relative to their ports.\n</p>")
interface KShapeLayout extends KLayoutData {
	float xpos = "0.0f"
	float ypos = "0.0f"
	float width = "0.0f"
	float height = "0.0f"
	contains KInsets insets
	@GenModel(documentation="Set the position of this shape layout.\n@param x the new x coordinate value\n@param y the new y coordinate value")
	op void setPos(float x , float y)
	@GenModel(documentation="Set the position of this shape layout by applying the given vector.\n@param pos the vector for the new position")
	op void applyVector(KVector pos)
	@GenModel(documentation="Create a vector from the position of this shape layout.\n@return the position vector")
	op KVector createVector()
	@GenModel(documentation="Set the size of this shape layout.\n@param width the new width\n@param height the new height")
	op void setSize(float width , float height)
}

@GenModel(documentation="This layout data contains special information for edges, such as bend points.\nEach graph element has either a shape layout or an edge layout attached.\n<p>\nAll layout coordinates for edges are defined to be relative to the parent of\nthe source node, except when the target node is directly or indirectly contained\nin the source node, in which case all coordinates are relative to the source node\nitself. The insets of the reference node are not included in relative coordinates.\n</p>")
interface KEdgeLayout extends KLayoutData {
	@GenModel(documentation="The coordinates of bend points must obey the general rules for edge\ncoordinates defined above.")
	contains KPoint[] bendPoints
	@GenModel(documentation="The source point is the point at which the edge touches the source node\nor source port. The coordinates of source points must obey the general\nrules for edge coordinates defined above.")
	contains KPoint[1] sourcePoint
	@GenModel(documentation="The target point is the point at which the edge touches the target node\nor target port. The coordinates of target points must obey the general\nrules for edge coordinates defined above.")
	contains KPoint[1] targetPoint
	@GenModel(documentation="Set the source point, bend points, and target point of this edge layout\nfrom the given vector chain. The vector chain should contain at least\ntwo points; the first point is taken as source point, while the last one is\ntaken as target point.\n@param points the new points for this edge layout")
	op void applyVectorChain(KVectorChain points)
	@GenModel(documentation="Create a vector chain from the points of this edge layout. The resulting\nvector chain contains at least two points; the first point is the source point,\nwhile the last one is the target point.\n@return the points of this edge layout")
	op KVectorChain createVectorChain()
}

@GenModel(documentation="Common interface for shape layouts and edge layouts. Shape layouts are\nused by nodes, ports, and labels, while edge layouts are used by edges.")
interface KLayoutData extends EMapPropertyHolder {
	@GenModel(documentation="Whether the concrete layout data have been modified since the layout data instance\nwas created or the modification flag was reset. For shape layouts this refers to the\nposition or size, and for edge layouts it refers to the source point, target point, or\nbend points.")
	op boolean[1] isModified()
	@GenModel(documentation="Reset the modification flag to {@code false}. Layout algorithms should not do this.")
	op void resetModificationFlag()
}

class KPoint {
	float x = "0.0f"
	float y = "0.0f"
	@GenModel(documentation="Set a new position for this point.\n@param x the new x coordinate value\n@param y the new y coordinate value")
	op void setPos(float x , float y)
	@GenModel(documentation="Set the position of this point using a vector.\n@param pos the vector for the new position")
	op void applyVector(KVector pos)
	@GenModel(documentation="Create a vector from this point.\n@return a vector with the position of this point")
	op KVector createVector()
}

@GenModel(documentation="Insets specify the amount of space that is required between the\nchildren of a node and the node\'s boundary. Usually the inset values must\nbe added to the bounding box of the contained subgraph.")
class KInsets {
	@GenModel(documentation="This is the minimal distance to the top side of a parent node.")
	float top
	@GenModel(documentation="This is the minimal distance to the bottom side of a parent node.")
	float bottom
	@GenModel(documentation="This is the minimal distance to the left side of a parent node.")
	float left
	float right
}

@GenModel(documentation="Can be used for unique identification of KGraph elements.")
class KIdentifier extends KGraphData {
	String[1] ^id
}

type KVector wraps org.eclipse.elk.core.math.KVector

type KVectorChain wraps org.eclipse.elk.core.math.KVectorChain