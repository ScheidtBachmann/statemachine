@Ecore(nsURI="http://kieler.cs.cau.de/sccharts/0.3.0")
@GenModel(
	copyrightText="KIELER - Kiel Integrated Environment for Layout Eclipse RichClient\r\n\r\nhttp://www.informatik.uni-kiel.de/rtsys/kieler/\r\n\r\nCopyright 2013 by\r\n+ Kiel University\r\n  + Department of Computer Science\r\n    + Real-Time and Embedded Systems Group\r\n\r\nThis code is provided under the terms of the Eclipse Public License (EPL).\r\nSee the file epl-v10.html for the license text.",
	bundleManifest="false",
	updateClasspath="false",
	complianceLevel="8.0",
	prefix="SCCharts",
	modelName="SCCharts",
	modelPluginID='',
	modelDirectory="/de.scheidtbachmann.statemachine/src/main/emf-gen"
)
package de.cau.cs.kieler.sccharts

import de.cau.cs.kieler.annotations.Annotatable
import de.cau.cs.kieler.annotations.NamedObject
import de.cau.cs.kieler.annotations.Pragmatable
import de.cau.cs.kieler.kexpressions.Call
import de.cau.cs.kieler.kexpressions.Expression
import de.cau.cs.kieler.kexpressions.Schedulable
import de.cau.cs.kieler.kexpressions.ValuedObject
import de.cau.cs.kieler.kexpressions.keffects.Assignment
import de.cau.cs.kieler.kexpressions.keffects.Effect
import de.cau.cs.kieler.kexpressions.keffects.Linkable
import de.cau.cs.kieler.kexpressions.kext.DeclarationScope

class SCCharts extends Pragmatable {
	contains State[] rootStates
}

@GenModel(documentation="A Scope is the abstract superclass for State and Region. \n<p>\nThe fields label and id are there to identify such object, where the label\nmay be an arbitrary String and the id may be used as identifier in programming languages. Therefore the\nid should be unique within its containing scope, should start with a word character (letter, underscore) and should not\ncontain whitespace.\n<p>\nThe interfaceDeclaration is a String text field containing the interface declaration in a textual representation. \nThe user of a model instance needs to take care that this textual representation gets parsed correctly and \ntranslated into proper Interface objects (e.g. Signals and Variables). For example the sccharts editor uses\nan Xtext grammar/parser to do this.\n<p>\nA Scope may carry lists of entry-, inner- or exit {@link Action}s that are executed on either Scope entry, staying a tick\nin the Scope or exiting the Scope. A suspensionTrigger Action guards the suspension of a Scope. When this trigger\nis evaluated to true, then the contents of the Scope is no longer evaluated until the guard gets false again.")
abstract class Scope extends Annotatable , DeclarationScope , NamedObject , Schedulable {
	String label
	contains LocalAction[] actions
	contains ScopeCall reference
}

class ScopeCall extends Call {
	refers Scope scope
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
abstract class Action extends Annotatable , Linkable {
	contains Effect[] effects
	contains Expression trigger
	int triggerDelay = "1"
	double triggerProbability
	unordered String label
	DelayType[1] delay = "UNDEFINED"
	boolean nondeterministic
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
abstract class LocalAction extends Action {
}

@GenModel(documentation="A State is the main entity in a SyncChart. States are located in a {@link Region}.\nA SyncChart itself is represented by a top-level root Region that contains\nexactly one root State. Every State may contain multiple parallel Regions\nwhereas a Region contains multiple States. This allows nested State\nmachines with parallelism.\n<p>\nA State may be initial or final or both. An initial State is the entry State of a Region.\nsccharts may only have one initial State per Region. A final State indcates that\nits parent Region has terminated and nothing needs to be done in that Region\nand its parent State may be left via a normal termination transition.\n<p>\nA State is also a Scope and hence may carry an interface declaration and is\nidentified by id and label.\n<p>\nStates have a type to indicate different properties of States. See {@link StateType}.")
class State extends Scope {
	container ControlflowRegion parentRegion opposite states
	contains Region[] regions opposite parentState
	boolean initial
	boolean final
	boolean violation
	boolean connector
	contains Transition[] outgoingTransitions opposite sourceState
	refers Transition[] incomingTransitions opposite targetState
	refers State[] baseStates
}

abstract class Region extends Scope , Linkable {
	container State parentState opposite regions
	contains ValuedObject counterVariable
	contains Expression forStart
	contains Expression forEnd
}

@GenModel(documentation="Regions represent a parallelism in sccharts. A {@link State} may contain\nmultiple Regions and each Region may contain multiple States. The Regions\nare then logically executed in parallel. A SyncChart gets represented by one root Region \nthat contains exactly one root State.\n<p>\nA Region is a {@link Scope} and therefore gets identified by label and id\nand carries an interface declaration. Hence a Region may declare\nlocal signals or variables.")
class ControlflowRegion extends Region {
	contains State[] states opposite parentRegion
	boolean final
}

@GenModel(documentation="Regions represent a parallelism in sccharts. A {@link State} may contain\nmultiple Regions and each Region may contain multiple States. The Regions\nare then logically executed in parallel. A SyncChart gets represented by one root Region \nthat contains exactly one root State.\n<p>\nA Region is a {@link Scope} and therefore gets identified by label and id\nand carries an interface declaration. Hence a Region may declare\nlocal signals or variables.")
class DataflowRegion extends Region {
	contains Assignment[] equations
	boolean[1] once
}

@GenModel(documentation="A Transition represents a connection between two {@link State}s and the\nshift from the source to the target State. In sccharts Transitions may\nonly be specified between States on the same Regions. Inter-level\nTransitions are not allowed.\n<p>\nA Transition is an {@link Action} and therefore may contain a trigger condition\nwhich guards the Transition and effects that get executed when the transition\nis taken.\n<p>\nTransitions have an integer priority. If there are multiple outgoing \ntransitions of a States and multiple triggers are evaluated to true, then\nthe transition with lowest priority is taken.\n<p>\nA history transition will enter its source state in its containing Regions at the states that\nit has left them before. So it does not start at the initial states in all circumstances but\nin the states that the source state was left in some earlier tick. Only when a State is entered\nfor the first time (i.e. there is no history) then it is always entered in its initial States.\n<p>\nA transition has a type {@link TransitionType}.")
class Transition extends Action {
	PreemptionType[1] preemption
	HistoryType[1] history = "RESET"
	boolean deferred
	refers State[1] targetState opposite incomingTransitions
	container State[1] sourceState opposite outgoingTransitions
}

@GenModel(documentation="A Transition has a type specifying some special property.\n")
enum PreemptionType {
	@GenModel(documentation="A WEAKABORT transition allows the\nexited State to execute its contents in that tick.")
	WEAKABORT
	@GenModel(documentation="A STRONGABORT will immediately\nleave the state and not allow any actions in\nthe source State in that tick. ")
	STRONGABORT = 1
	@GenModel(documentation="A NORMALTERMINATION will leave a State whenever all contained\nRegions are in final States. A normal termination may not define a guard trigger.")
	TERMINATION = 2
}

@GenModel(documentation="A Transition has a type specifying some special property.\n")
enum HistoryType {
	@GenModel(documentation="A WEAKABORT transition allows the\nexited State to execute its contents in that tick.")
	RESET
	@GenModel(documentation="A STRONGABORT will immediately\nleave the state and not allow any actions in\nthe source State in that tick. ")
	SHALLOW = 1
	@GenModel(documentation="A NORMALTERMINATION will leave a State whenever all contained\nRegions are in final States. A normal termination may not define a guard trigger.")
	DEEP = 2
}

enum DelayType {
	UNDEFINED
	DELAYED = 1
	IMMEDIATE = 2
	AUTOMATIC = 3
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class EntryAction extends LocalAction {
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class DuringAction extends LocalAction {
	DelayType[1] reset = "UNDEFINED"
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class ExitAction extends LocalAction {
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class SuspendAction extends LocalAction {
	boolean weak
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class PrecedingAction extends LocalAction {
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class SucceedingAction extends LocalAction {
}

@GenModel(documentation="An Action represents some effect that is executed under some\ncertain condition. The condition or sometimes called guard is\nthe trigger which simply is any boolean {@link Expression} over\n{@link Signal}s or {@link Variable}s. Note that Actions may also be used\nin contexts, where no trigger or resp. effects are allowed. E.g.\na suspensionTrigger has no effect.\n<p>\nThe effects of an Action are either {@link Assignment}, {@link Emission} or escaping\nto an {@link TextEffect}.\n<p>\nAn Action has a String label that represents the trigger and the effects\nlist in a textual representation. The user of the \nmodel is required to synchronize the label with the actual\ntrigger and effects objects. For the sccharts graphical editor\nthis is done by using an Xtext grammar/parser.")
class PeriodAction extends LocalAction {
}