@Ecore(nsURI="http://kieler.cs.cau.de/keffects/0.1.0")
@GenModel(
	bundleManifest="false",
	complianceLevel="8.0",
	prefix="KEffects",
	modelName="KEffects",
	modelPluginID='',
	modelDirectory="/de.scheidtbachmann.statemachine/src/main/emf-gen"
)
package de.cau.cs.kieler.kexpressions.keffects

import de.cau.cs.kieler.annotations.Annotatable
import de.cau.cs.kieler.kexpressions.Expression
import de.cau.cs.kieler.kexpressions.FunctionCall
import de.cau.cs.kieler.kexpressions.PrintCall
import de.cau.cs.kieler.kexpressions.RandomizeCall
import de.cau.cs.kieler.kexpressions.ReferenceCall
import de.cau.cs.kieler.kexpressions.Schedulable
import de.cau.cs.kieler.kexpressions.TextExpression
import de.cau.cs.kieler.kexpressions.ValuedObjectReference
import org.eclipse.emf.ecore.EObject

interface Effect extends Annotatable , Schedulable , Linkable {
}

class Assignment extends Effect {
	contains ValuedObjectReference reference
	contains Expression expression
	AssignOperator operator
	contains ValuedObjectReference subReference
}

enum AssignOperator {
	ASSIGN
	ASSIGNADD = 1
	ASSIGNSUB = 2
	ASSIGNMUL = 3
	ASSIGNDIV = 4
	ASSIGNMOD = 5
	ASSIGNAND = 6
	ASSIGNOR = 7
	ASSIGNXOR = 8
	POSTFIXADD = 9
	POSTFIXSUB = 10
	ASSIGNMIN = 11
	ASSIGNMAX as "" = 12
	ASSIGNSHIFTLEFT = 13
	ASSIGNSHIFTRIGHT = 14
	ASSIGNSHIFTRIGHTUNSIGNED = 15
}

class Emission extends Effect {
	contains ValuedObjectReference[1] reference
	contains Expression newValue
}

class HostcodeEffect extends Effect , TextExpression {
}

class ReferenceCallEffect extends Effect , ReferenceCall {
}

class FunctionCallEffect extends Effect , FunctionCall {
}

class PrintCallEffect extends Effect , PrintCall {
}

class RandomizeCallEffect extends Effect , RandomizeCall {
}

abstract class Linkable {
	contains transient Link[] outgoingLinks
	refers transient Link[] incomingLinks opposite target
}

abstract class Link extends Annotatable {
	refers transient Linkable[1] target opposite incomingLinks
	String tag
	refers EObject reference
}

abstract class Dependency extends Link {
}

enum DataDependencyType {
	IGNORE = -2
	UNKNOWN = -1
	WRITE_WRITE
	WRITE_RELATIVEWRITE = 1
	WRITE_READ = 2
}

class DataDependency extends Dependency {
	DataDependencyType ^type
	boolean concurrent
	boolean confluent
}