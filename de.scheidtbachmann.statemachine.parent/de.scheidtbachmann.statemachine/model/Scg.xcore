@Ecore(nsURI="http://kieler.cs.cau.de/scg/0.1.0")
@GenModel(
	copyrightText="KIELER - Kiel Integrated Environment for Layout Eclipse RichClient\r\n\r\nhttp://www.informatik.uni-kiel.de/rtsys/kieler/\r\n\r\nCopyright 2013 by\r\n+ Kiel University\r\n  + Department of Computer Science\r\n    + Real-Time and Embedded Systems Group\r\n\r\nThis code is provided under the terms of the Eclipse Public License (EPL).\r\nSee the file epl-v10.html for the license text.",
	bundleManifest="false",
	updateClasspath="false", 
	complianceLevel="8.0",
	modelPluginID='',
	modelDirectory="/de.scheidtbachmann.statemachine/src/main/emf-gen"
)
package de.cau.cs.kieler.scg

import de.cau.cs.kieler.annotations.Annotatable
import de.cau.cs.kieler.annotations.NamedObject
import de.cau.cs.kieler.annotations.Pragmatable
import de.cau.cs.kieler.kexpressions.Expression
import de.cau.cs.kieler.kexpressions.ValuedObject
import de.cau.cs.kieler.kexpressions.keffects.Dependency
import de.cau.cs.kieler.kexpressions.keffects.Link
import de.cau.cs.kieler.kexpressions.keffects.Linkable
import de.cau.cs.kieler.kexpressions.kext.DeclarationScope

class SCGraphs extends Pragmatable {
	contains SCGraph[] scgs
}

class SCGraph extends Annotatable , NamedObject , DeclarationScope {
	contains Node[] nodes
	contains BasicBlock[] basicBlocks
	contains Guard[] guards
	String label
}

class Node extends Annotatable , NamedObject , Linkable {
	boolean isInitial
	boolean schizophrenic
}

class Conditional extends Node {
	contains ControlFlow then
	contains ControlFlow ^else
	contains Expression condition
}

class Surface extends Node {
	refers Depth[1] depth opposite surface
}

class Depth extends Node {
	refers Surface[1] surface opposite depth
	contains ControlFlow next
}

class Assignment extends Node , de.cau.cs.kieler.kexpressions.keffects.Assignment {
	contains ControlFlow next
}

class Fork extends Node {
	refers Join[1] join opposite fork
	contains ControlFlow[+] next
}

class Join extends Node {
	refers Fork[1] fork opposite join
	contains ControlFlow next
}

class Entry extends Node {
	refers Exit[1] exit opposite entry
	contains ControlFlow next
}

class Exit extends Node {
	refers Entry[1] entry opposite exit
	contains ControlFlow next
	boolean final
}

class BasicBlock {
	contains SchedulingBlock[] schedulingBlocks
	contains Predecessor[] predecessors
	refers Entry threadEntry
	boolean goBlock
	boolean depthBlock
	boolean synchronizerBlock
	boolean entryBlock
	boolean deadBlock
	boolean termBlock
	refers ValuedObject preGuard
	boolean finalBlock
}

class SchedulingBlock {
	refers Node[] nodes
	refers Dependency[] dependencies
	refers Guard[+] guards
	String label
}

class Predecessor {
	refers BasicBlock[1] basicBlock
	refers Conditional conditional
	BranchType branchType
}

class Guard extends Node , de.cau.cs.kieler.kexpressions.keffects.Assignment {
}

enum BranchType {
	NORMAL
	TRUEBRANCH = 1
	ELSEBRANCH = 2
}

class ControlFlow extends Link {
}

class ControlDependency extends Dependency {
}

class ExpressionDependency extends Dependency {
}

class GuardDependency extends Dependency {
}

class ScheduleDependency extends Dependency {
}